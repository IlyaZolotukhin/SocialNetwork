{"version":3,"file":"static/js/3.496c8593.chunk.js","mappings":"2JACA,SAAgB,QAAU,yBAAyB,QAAU,yBAAyB,aAAe,8BAA8B,UAAY,2BAA2B,UAAY,2BAA2B,SAAW,0BAA0B,QAAU,yBAAyB,OAAS,wBAAwB,aAAe,8BAA8B,cAAgB,+BAA+B,SAAW,2B,qBCSja,MAWA,EAXiBA,IAELC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAEC,aAAaC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,OAAKJ,UAAWC,EAAEI,cAAcF,SAAEL,EAAMQ,WAC5CF,EAAAA,EAAAA,KAAA,OAAKJ,UAAWC,EAAEM,YACdR,EAAAA,EAAAA,MAAA,OAAAI,SAAA,CAAK,KAACC,EAAAA,EAAAA,KAAA,OAAKI,IAAKC,U,cCNhC,MAUA,EAVoBX,IAChB,IAAIY,EAAO,YAAYZ,EAAMa,GAC7B,OACIP,EAAAA,EAAAA,KAAA,OAAKJ,UAAWC,EAAEW,OAAOT,UACrBC,EAAAA,EAAAA,KAACS,EAAAA,GAAO,CAACC,GAAIJ,EAAKP,SAAEL,EAAMiB,QACxB,E,2CCEd,MA0CaC,GAAsBC,EAAAA,EAAAA,GAA+B,CAACC,KAAM,wBAAtCD,EAZuCnB,IAGlEC,EAAAA,EAAAA,MAAA,QAAMoB,SAAUrB,EAAMsB,aAAajB,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAACiB,EAAAA,EAAK,CAACC,YAAa,qBAAsBP,KAAM,iBAAkBQ,UAAWC,EAAAA,EACtEC,SAAU,CAACC,EAAAA,EAASC,EAAAA,QAE/BvB,EAAAA,EAAAA,KAAA,UAAQJ,UAAWC,EAAE2B,OAAOzB,SAAC,cAM7C,EA5CiBL,IAEb,IAAI+B,EAAkB/B,EAAMgC,YAAYC,QAAQC,KAAIC,IAAK7B,EAAAA,EAAAA,KAAC8B,EAAU,CAACnB,KAAMkB,EAAElB,KAAMJ,GAAIsB,EAAEtB,OACrFwB,EAAmBrC,EAAMgC,YAAYM,SAASJ,KAAIK,IAAKjC,EAAAA,EAAAA,KAACkC,EAAO,CAAChC,QAAS+B,EAAE/B,QAASK,GAAI0B,EAAE1B,OAK9F,OACIP,EAAAA,EAAAA,KAAA,OAAAD,UACIJ,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAEsC,QAAQpC,SAAA,EACtBJ,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAE8B,QAAQ5B,SAAA,EACtBC,EAAAA,EAAAA,KAAA,OAAKJ,UAAWC,EAAEuC,aAAarC,SAC1B0B,KAELzB,EAAAA,EAAAA,KAAA,OAAKJ,UAAWC,EAAEwC,UAAUtC,UACxBC,EAAAA,EAAAA,KAAA,OAAAD,SAAMgC,UAId/B,EAAAA,EAAAA,KAACY,EAAmB,CAACG,SAAUrB,EAAM4C,oBAEvC,E,+BClBd,SAAeC,EAAAA,EAAAA,KAAYC,EAAAA,EAAAA,KAZJC,IACb,CACFf,YAAae,EAAMf,YACnBgB,OAAQD,EAAME,KAAKD,WAGDE,IAChB,CACFN,cAAgBO,IAAkCD,GAASE,EAAAA,EAAAA,GAAmBD,EAASE,gBAAgB,MAIvCC,EAAAA,EAAxE,CAA0FC,E","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Dialogs_content__VCd5R\",\"dialogs\":\"Dialogs_dialogs__cwSxu\",\"dialogsItems\":\"Dialogs_dialogsItems__Rc7oh\",\"messages1\":\"Dialogs_messages1__M4QDF\",\"messages2\":\"Dialogs_messages2__z5ZDg\",\"messages\":\"Dialogs_messages__2RkYG\",\"message\":\"Dialogs_message__3FITA\",\"dialog\":\"Dialogs_dialog__K7fYm\",\"messageBlock\":\"Dialogs_messageBlock__c9+r1\",\"messageString\":\"Dialogs_messageString__99mPH\",\"triangle\":\"Dialogs_triangle__ULp8f\"};","import React from \"react\";\r\nimport s from './../Dialogs.module.css'\r\nimport userPhoto from \"../../assets/images/user.png\";\r\n\r\ntype MessageType = {\r\n    message: string\r\n    id: number\r\n\r\n}\r\n\r\nconst Message = (props:MessageType) => {\r\n    return (\r\n            <div className={s.messageBlock}>\r\n                <div className={s.messageString}>{props.message}</div>\r\n            <div className={s.triangle} ></div>\r\n                <div> <img src={userPhoto}/></div>\r\n            </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem = (props:DialogItemType) => {\r\n    let path = \"/dialogs/\"+props.id;\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport {DialogPageType} from \"../../redux/Types\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../components/common/FormsControls/FormsControls\";\r\nimport {maxLength50, required} from \"../../utils/validators/validators\";\r\n\r\ntype DialogsPropsType = {\r\n    isAuth: boolean\r\n    dialogsPage: DialogPageType\r\n    addNewMessage: (formData: FormMessageDataType) => void\r\n}\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} id={d.id}/>)\r\n    let messagesElements = props.dialogsPage.messages.map(m => <Message message={m.message} id={m.id}/>)\r\n\r\n/*    console.log(props.isAuth)\r\n    if (!props.isAuth) return <Redirect to={\"/login\"}/>;*/\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.content}>\r\n                <div className={s.dialogs}>\r\n                    <div className={s.dialogsItems}>\r\n                        {dialogsElements}\r\n                    </div>\r\n                    <div className={s.messages2}>\r\n                        <div>{messagesElements}</div>\r\n                    </div>\r\n                </div>\r\n\r\n                <AddMessageFormRedux onSubmit={props.addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport type FormMessageDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormMessageDataType>> = (props) => {\r\n\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    <Field placeholder={'Enter your message'} name={'newMessageBody'} component={Textarea}\r\n                           validate={[required,maxLength50]}/>\r\n                </div>\r\n                <button className={s.button}>Send</button>\r\n        </form>\r\n    )\r\n}\r\nexport const AddMessageFormRedux = reduxForm<FormMessageDataType>({form: \"dialogAddMessageForm\"})(AddMessageForm)\r\n\r\nexport default Dialogs;\r\n","import {FC} from \"react\";\r\nimport {DialogsReducerActionsType, sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs, {FormMessageDataType} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\nlet mapStateToProps = (state: RootStateType) => {\r\n    return{\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch<DialogsReducerActionsType>) => {\r\n    return{\r\n        addNewMessage: (formData: FormMessageDataType)=>{ dispatch(sendMessageCreator(formData.newMessageBody))}\r\n    }\r\n}\r\n\r\nexport default compose<FC>(connect(mapStateToProps,mapDispatchToProps), withAuthRedirect)(Dialogs);\r\n"],"names":["props","_jsxs","className","s","messageBlock","children","_jsx","messageString","message","triangle","src","userPhoto","path","id","dialog","NavLink","to","name","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","maxLength50","button","dialogsElements","dialogsPage","dialogs","map","d","DialogItem","messagesElements","messages","m","Message","content","dialogsItems","messages2","addNewMessage","compose","connect","state","isAuth","auth","dispatch","formData","sendMessageCreator","newMessageBody","withAuthRedirect","Dialogs"],"sourceRoot":""}